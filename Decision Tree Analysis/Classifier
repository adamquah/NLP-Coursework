from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, roc_curve, auc, roc_auc_score

# Convert 'Food supply quantity' into two classes: 'Low' and 'High' based on a threshold
threshold = df['Food supply quantity (kg/capita/yr)'].median()
df['Food Class'] = df['Food supply quantity (kg/capita/yr)'].apply(lambda x: 0 if x <= threshold else 1)

# Extract features (X) and target variable (y)
X = df[['Production']]
y = df['Food Class']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the Decision Tree Classifier
model = DecisionTreeClassifier(max_depth=5, random_state=42)  # Adjust hyperparameters
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Display classification report
report = classification_report(y_test, y_pred, target_names=['Low', 'High'])
print("Classification Report:")
print(report)

# Compute ROC curve and AUC
fpr, tpr, _ = roc_curve(y_test, model.predict_proba(X_test)[:, 1])
roc_auc = auc(fpr, tpr)

# Compute ROC-AUC score
roc_auc_score_value = roc_auc_score(y_test, model.predict_proba(X_test)[:, 1])
print(f"ROC-AUC Score: {roc_auc_score_value:.2f}")

# Plot ROC curve with AUC filled region (smaller graph)
plt.figure(figsize=(6, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC = {roc_auc:.2f}')
plt.fill_between(fpr, tpr, color='lightgray', alpha=0.5)
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic with AUC (Decision Tree)')
plt.legend(loc="lower right")
plt.show()

# Evaluate the accuracy
accuracy = accuracy_score(y_test, y_pred)
print('Accuracy:', accuracy)
