import matplotlib.pyplot as plt
import numpy as np

# Model names
models = ['Decision Tree', 'KNN', 'Naive Bayes', 'Random Forest']

# Metrics for each model
accuracy = [0.85, 0.97, 0.97, 0.97]
precision = [0.85, 0.90, 0.99, 0.90]
recall = [0.85, 0.98, 0.75, 0.98]
f1_score = [0.85, 0.94, 0.83, 0.94]

# Create bar chart
fig, ax = plt.subplots(figsize=(12, 9))
bar_width = 0.2
bar_positions = np.arange(len(models))

# Bar for Accuracy
bars1 = ax.bar(bar_positions - bar_width, accuracy, bar_width, label='Accuracy', alpha=0.7)
# Bars for Precision, Recall, and F1-Score
bars2 = ax.bar(bar_positions, precision, bar_width, label='Precision', alpha=0.7)
bars3 = ax.bar(bar_positions + bar_width, recall, bar_width, label='Recall', alpha=0.7)
bars4 = ax.bar(bar_positions + 2 * bar_width, f1_score, bar_width, label='F1-Score', alpha=0.7)

# X-axis labels and title
ax.set_xticks(bar_positions + bar_width)
ax.set_xticklabels(models)
ax.set_xlabel('Models')
ax.set_ylabel('Scores')
ax.set_title('Model Comparison - Classification Metrics')

# Display legend
ax.legend()

# Add values on top of each bar
def add_values(bars):
    for bar in bars:
        height = bar.get_height()
        ax.annotate(f'{height:.2f}',
                    xy=(bar.get_x() + bar.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')

add_values(bars1)
add_values(bars2)
add_values(bars3)
add_values(bars4)

# Show the plot
plt.show()
