import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, roc_curve, auc, roc_auc_score
import matplotlib.pyplot as plt

X = food_loss_waste[['Year', 'Value']]
y = (food_loss_waste['Element'] == 'Loss').astype(int)  # Binary classification for loss

# spliting the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#prompt user input
# Get user input for prediction
year = float(input("Enter Year (2010-2021): "))
export = float(input("Enter Export (tonnes): "))
food_supply_quantity = float(input("Enter Food Supply Quantity (tonnes): "))
import_value = float(input("Enter Import (tonnes): "))
processed_value = float(input("Enter Processed (tonnes): "))
production_value = float(input("Enter Production (tonnes): "))

# Create a DataFrame with user input
user_input_df = pd.DataFrame({
    'Year': [year],
    'Value': [food_supply_quantity],
    # Add other columns if present in your dataset
})

# Define the Random Forest model
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
rf_model.fit(X_train, y_train)

# Make predictions on the user input
user_pred = rf_model.predict(user_input_df)

# Display the prediction
print(f"Predicted Loss (1) or Not Loss (0): {user_pred[0]}")

# Make predictions on the test set
y_pred = rf_model.predict(X_test)

# Display classification report
report = classification_report(y_test, y_pred, target_names=['Not Loss', 'Loss'])
print("Classification Report:")
print(report)
